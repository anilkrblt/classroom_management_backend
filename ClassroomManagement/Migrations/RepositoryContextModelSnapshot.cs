// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace ClassroomManagement.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Entities.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("BuildingId");

                    b.ToTable("Building");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            Name = "A"
                        },
                        new
                        {
                            BuildingId = 2,
                            Name = "B"
                        });
                });

            modelBuilder.Entity("Entities.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PresidentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClubId");

                    b.HasIndex("PresidentId");

                    b.ToTable("Club");

                    b.HasData(
                        new
                        {
                            ClubId = 1,
                            ImageData = new byte[0],
                            Name = "Mathematics Club",
                            PresidentId = 1
                        },
                        new
                        {
                            ClubId = 2,
                            ImageData = new byte[0],
                            Name = "Physics Club",
                            PresidentId = 2
                        },
                        new
                        {
                            ClubId = 3,
                            ImageData = new byte[0],
                            Name = "Chemistry Society",
                            PresidentId = 3
                        },
                        new
                        {
                            ClubId = 4,
                            ImageData = new byte[0],
                            Name = "Biology Club",
                            PresidentId = 4
                        },
                        new
                        {
                            ClubId = 5,
                            ImageData = new byte[0],
                            Name = "Computer Science Club",
                            PresidentId = 5
                        },
                        new
                        {
                            ClubId = 6,
                            ImageData = new byte[0],
                            Name = "Engineering Club",
                            PresidentId = 6
                        },
                        new
                        {
                            ClubId = 7,
                            ImageData = new byte[0],
                            Name = "Economics Club",
                            PresidentId = 7
                        },
                        new
                        {
                            ClubId = 8,
                            ImageData = new byte[0],
                            Name = "History Society",
                            PresidentId = 8
                        },
                        new
                        {
                            ClubId = 9,
                            ImageData = new byte[0],
                            Name = "Philosophy Club",
                            PresidentId = 9
                        },
                        new
                        {
                            ClubId = 10,
                            ImageData = new byte[0],
                            Name = "Art and Design Club",
                            PresidentId = 10
                        });
                });

            modelBuilder.Entity("Entities.Models.ClubMembership", b =>
                {
                    b.Property<int>("ClubMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClubMembershipId");

                    b.HasIndex("ClubId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClubMembership");

                    b.HasData(
                        new
                        {
                            ClubMembershipId = 1,
                            ClubId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            ClubMembershipId = 2,
                            ClubId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            ClubMembershipId = 3,
                            ClubId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            ClubMembershipId = 4,
                            ClubId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            ClubMembershipId = 5,
                            ClubId = 3,
                            StudentId = 5
                        },
                        new
                        {
                            ClubMembershipId = 6,
                            ClubId = 3,
                            StudentId = 6
                        },
                        new
                        {
                            ClubMembershipId = 7,
                            ClubId = 4,
                            StudentId = 7
                        },
                        new
                        {
                            ClubMembershipId = 8,
                            ClubId = 4,
                            StudentId = 8
                        },
                        new
                        {
                            ClubMembershipId = 9,
                            ClubId = 5,
                            StudentId = 9
                        },
                        new
                        {
                            ClubMembershipId = 10,
                            ClubId = 5,
                            StudentId = 10
                        });
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Name = "Computer Engineering"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Name = "Machine Engineering"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Name = "Electric Electronic Engineering"
                        },
                        new
                        {
                            DepartmentId = 4,
                            Name = "BioEngineering"
                        },
                        new
                        {
                            DepartmentId = 5,
                            Name = "Food Engineering"
                        });
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Email = "alibaba@trakya.edu.tr",
                            IsAdmin = true,
                            Name = "Ali Baba",
                            Password = "123"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Email = "ayseyilmaz@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Ayşe Yılmaz",
                            Password = "abc"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Email = "mehmetcelik@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Mehmet Çelik",
                            Password = "456"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Email = "fatmademir@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Fatma Demir",
                            Password = "789"
                        },
                        new
                        {
                            EmployeeId = 5,
                            Email = "ahmetkaya@trakya.edu.tr",
                            IsAdmin = true,
                            Name = "Ahmet Kaya",
                            Password = "xyz"
                        },
                        new
                        {
                            EmployeeId = 6,
                            Email = "zeynepaksoy@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Zeynep Aksoy",
                            Password = "321"
                        },
                        new
                        {
                            EmployeeId = 7,
                            Email = "hakanyildirim@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Hakan Yıldırım",
                            Password = "654"
                        },
                        new
                        {
                            EmployeeId = 8,
                            Email = "seliner@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Selin Er",
                            Password = "987"
                        },
                        new
                        {
                            EmployeeId = 9,
                            Email = "mustafakurt@trakya.edu.tr",
                            IsAdmin = true,
                            Name = "Mustafa Kurt",
                            Password = "qwe"
                        },
                        new
                        {
                            EmployeeId = 10,
                            Email = "elifsari@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Elif Sarı",
                            Password = "zxc"
                        });
                });

            modelBuilder.Entity("Entities.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LectureCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("LectureCode");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollment");

                    b.HasData(
                        new
                        {
                            EnrollmentId = 1,
                            LectureCode = "MATH101",
                            StudentId = 1
                        },
                        new
                        {
                            EnrollmentId = 2,
                            LectureCode = "PHYS201",
                            StudentId = 2
                        },
                        new
                        {
                            EnrollmentId = 3,
                            LectureCode = "CHEM301",
                            StudentId = 3
                        },
                        new
                        {
                            EnrollmentId = 4,
                            LectureCode = "BIOL102",
                            StudentId = 4
                        },
                        new
                        {
                            EnrollmentId = 5,
                            LectureCode = "CS202",
                            StudentId = 5
                        },
                        new
                        {
                            EnrollmentId = 6,
                            LectureCode = "ENG103",
                            StudentId = 6
                        },
                        new
                        {
                            EnrollmentId = 7,
                            LectureCode = "HIST205",
                            StudentId = 7
                        },
                        new
                        {
                            EnrollmentId = 8,
                            LectureCode = "ENGM202",
                            StudentId = 8
                        },
                        new
                        {
                            EnrollmentId = 9,
                            LectureCode = "ECON301",
                            StudentId = 9
                        },
                        new
                        {
                            EnrollmentId = 10,
                            LectureCode = "PHIL101",
                            StudentId = 10
                        });
                });

            modelBuilder.Entity("Entities.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LectureCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ExamId");

                    b.HasIndex("LectureCode");

                    b.ToTable("Exam");

                    b.HasData(
                        new
                        {
                            ExamId = 1,
                            LectureCode = "MATH101",
                            Name = "Mathematics Final Exam"
                        },
                        new
                        {
                            ExamId = 2,
                            LectureCode = "PHYS201",
                            Name = "Physics Midterm Exam"
                        },
                        new
                        {
                            ExamId = 3,
                            LectureCode = "CHEM301",
                            Name = "Chemistry Final Exam"
                        },
                        new
                        {
                            ExamId = 4,
                            LectureCode = "BIOL102",
                            Name = "Biology Quiz"
                        },
                        new
                        {
                            ExamId = 5,
                            LectureCode = "CS202",
                            Name = "Computer Science Lab Exam"
                        },
                        new
                        {
                            ExamId = 6,
                            LectureCode = "ENG103",
                            Name = "English Language Test"
                        },
                        new
                        {
                            ExamId = 7,
                            LectureCode = "HIST205",
                            Name = "History Midterm Exam"
                        },
                        new
                        {
                            ExamId = 8,
                            LectureCode = "ENGM202",
                            Name = "Engineering Mechanics Final"
                        },
                        new
                        {
                            ExamId = 9,
                            LectureCode = "ECON301",
                            Name = "Economics Final Exam"
                        },
                        new
                        {
                            ExamId = 10,
                            LectureCode = "PHIL101",
                            Name = "Philosophy Critical Thinking Test"
                        });
                });

            modelBuilder.Entity("Entities.Models.ExamSession", b =>
                {
                    b.Property<int>("ExamSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ExamSessionId");

                    b.HasIndex("ExamId");

                    b.HasIndex("RoomId");

                    b.ToTable("ExamSession");

                    b.HasData(
                        new
                        {
                            ExamSessionId = 1,
                            DayOfWeek = "Monday",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            ExamDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 1,
                            RoomId = 1,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 2,
                            DayOfWeek = "Tuesday",
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            ExamDate = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 2,
                            RoomId = 2,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 3,
                            DayOfWeek = "Wednesday",
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExamDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 3,
                            RoomId = 3,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 4,
                            DayOfWeek = "Thursday",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ExamDate = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 4,
                            RoomId = 4,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 5,
                            DayOfWeek = "Friday",
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            ExamDate = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 5,
                            RoomId = 5,
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 6,
                            DayOfWeek = "Saturday",
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            ExamDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 6,
                            RoomId = 6,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 7,
                            DayOfWeek = "Sunday",
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            ExamDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 7,
                            RoomId = 7,
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 8,
                            DayOfWeek = "Monday",
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            ExamDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 8,
                            RoomId = 8,
                            StartTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 9,
                            DayOfWeek = "Tuesday",
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            ExamDate = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 9,
                            RoomId = 9,
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            ExamSessionId = 10,
                            DayOfWeek = "Wednesday",
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            ExamDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamId = 10,
                            RoomId = 10,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Entities.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Instructor");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            DepartmentId = 1,
                            Email = "altanmesut@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Altan Mesut",
                            Password = "123",
                            Title = "Dr. Ögretim Üyesi"
                        },
                        new
                        {
                            InstructorId = 2,
                            DepartmentId = 1,
                            Email = "emirozturk@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Emir Öztürk",
                            Password = "123",
                            Title = "Dr. Ögretim Üyesi"
                        },
                        new
                        {
                            InstructorId = 3,
                            DepartmentId = 2,
                            Email = "aysekaya@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Ayşe Kaya",
                            Password = "456",
                            Title = "Doçent Doktor"
                        },
                        new
                        {
                            InstructorId = 4,
                            DepartmentId = 3,
                            Email = "mehmetyildiz@trakya.edu.tr",
                            IsAdmin = true,
                            Name = "Mehmet Yıldız",
                            Password = "789",
                            Title = "Profesör Doktor"
                        },
                        new
                        {
                            InstructorId = 5,
                            DepartmentId = 2,
                            Email = "fatmademir@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Fatma Demir",
                            Password = "abc",
                            Title = "Doçent Doktor"
                        },
                        new
                        {
                            InstructorId = 6,
                            DepartmentId = 1,
                            Email = "ahmetcelik@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Ahmet Çelik",
                            Password = "xyz",
                            Title = "Dr. Ögretim Üyesi"
                        },
                        new
                        {
                            InstructorId = 7,
                            DepartmentId = 3,
                            Email = "zeyneparslan@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Zeynep Arslan",
                            Password = "qwe",
                            Title = "Dr. Ögretim Üyesi"
                        },
                        new
                        {
                            InstructorId = 8,
                            DepartmentId = 4,
                            Email = "mustafaozkan@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Mustafa Özkan",
                            Password = "zxc",
                            Title = "Dr. Ögretim Üyesi"
                        },
                        new
                        {
                            InstructorId = 9,
                            DepartmentId = 3,
                            Email = "elifsari@trakya.edu.tr",
                            IsAdmin = true,
                            Name = "Elif Sarı",
                            Password = "poi",
                            Title = "Profesör Doktor"
                        },
                        new
                        {
                            InstructorId = 10,
                            DepartmentId = 2,
                            Email = "hakanyilmaz@trakya.edu.tr",
                            IsAdmin = false,
                            Name = "Hakan Yılmaz",
                            Password = "mnb",
                            Title = "Doçent Doktor"
                        });
                });

            modelBuilder.Entity("Entities.Models.InstructorPreference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LectureCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnavailableTimes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PreferenceId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LectureCode");

                    b.ToTable("InstructorPreference");

                    b.HasData(
                        new
                        {
                            PreferenceId = 1,
                            InstructorId = 1,
                            LectureCode = "MATH101",
                            PreferredTime = "{ \"Monday\": [\"09:00-11:00\", \"13:00-15:00\"], \"Wednesday\": [\"10:00-12:00\"] }",
                            UnavailableTimes = "{ \"Friday\": [\"08:00-10:00\", \"14:00-16:00\"] }"
                        },
                        new
                        {
                            PreferenceId = 2,
                            InstructorId = 2,
                            LectureCode = "PHYS201",
                            PreferredTime = "{ \"Tuesday\": [\"10:00-12:00\", \"14:00-16:00\"], \"Thursday\": [\"09:00-11:00\"] }",
                            UnavailableTimes = "{ \"Monday\": [\"08:00-10:00\"], \"Wednesday\": [\"15:00-17:00\"] }"
                        },
                        new
                        {
                            PreferenceId = 3,
                            InstructorId = 3,
                            LectureCode = "BIOL102",
                            PreferredTime = "{ \"Monday\": [\"13:00-15:00\"], \"Friday\": [\"09:00-11:00\"] }",
                            UnavailableTimes = "{ \"Tuesday\": [\"10:00-12:00\"] }"
                        },
                        new
                        {
                            PreferenceId = 4,
                            InstructorId = 4,
                            LectureCode = "CH401",
                            PreferredTime = "{ \"Wednesday\": [\"08:00-10:00\", \"12:00-14:00\"] }",
                            UnavailableTimes = "{ \"Thursday\": [\"09:00-11:00\"] }"
                        },
                        new
                        {
                            PreferenceId = 5,
                            InstructorId = 5,
                            LectureCode = "CS202",
                            PreferredTime = "{ \"Tuesday\": [\"14:00-16:00\"], \"Friday\": [\"08:00-10:00\"] }",
                            UnavailableTimes = "{ \"Monday\": [\"09:00-11:00\"] }"
                        });
                });

            modelBuilder.Entity("Entities.Models.Lecture", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Lecture");

                    b.HasData(
                        new
                        {
                            Code = "MATH101",
                            DepartmentId = 1,
                            Name = "Mathematics I"
                        },
                        new
                        {
                            Code = "PHYS201",
                            DepartmentId = 2,
                            Name = "Physics I"
                        },
                        new
                        {
                            Code = "CHEM301",
                            DepartmentId = 3,
                            Name = "Chemistry"
                        },
                        new
                        {
                            Code = "BIOL102",
                            DepartmentId = 1,
                            Name = "Biology"
                        },
                        new
                        {
                            Code = "CS202",
                            DepartmentId = 1,
                            Name = "Computer Science"
                        },
                        new
                        {
                            Code = "ENG103",
                            DepartmentId = 2,
                            Name = "English Language"
                        },
                        new
                        {
                            Code = "HIST205",
                            DepartmentId = 1,
                            Name = "History"
                        },
                        new
                        {
                            Code = "ENGM202",
                            DepartmentId = 2,
                            Name = "Engineering Mechanics"
                        },
                        new
                        {
                            Code = "ECON301",
                            DepartmentId = 3,
                            Name = "Economics"
                        },
                        new
                        {
                            Code = "PHIL101",
                            DepartmentId = 2,
                            Name = "Philosophy"
                        });
                });

            modelBuilder.Entity("Entities.Models.LectureSession", b =>
                {
                    b.Property<int>("LectureSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LectureCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("LectureSessionId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LectureCode");

                    b.HasIndex("RoomId");

                    b.ToTable("LectureSession");

                    b.HasData(
                        new
                        {
                            LectureSessionId = 1,
                            DayOfWeek = "Monday",
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            InstructorId = 1,
                            LectureCode = "MATH101",
                            RoomId = 1,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 2,
                            DayOfWeek = "Tuesday",
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            InstructorId = 2,
                            LectureCode = "PHYS201",
                            RoomId = 2,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 3,
                            DayOfWeek = "Wednesday",
                            EndTime = new TimeSpan(0, 14, 30, 0, 0),
                            InstructorId = 3,
                            LectureCode = "CHEM301",
                            RoomId = 3,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 4,
                            DayOfWeek = "Thursday",
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            InstructorId = 4,
                            LectureCode = "BIOL102",
                            RoomId = 4,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 5,
                            DayOfWeek = "Friday",
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            InstructorId = 5,
                            LectureCode = "CS202",
                            RoomId = 5,
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 6,
                            DayOfWeek = "Monday",
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            InstructorId = 6,
                            LectureCode = "ENG103",
                            RoomId = 6,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 7,
                            DayOfWeek = "Tuesday",
                            EndTime = new TimeSpan(0, 15, 30, 0, 0),
                            InstructorId = 7,
                            LectureCode = "HIST205",
                            RoomId = 7,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 8,
                            DayOfWeek = "Wednesday",
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            InstructorId = 8,
                            LectureCode = "ENGM202",
                            RoomId = 8,
                            StartTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 9,
                            DayOfWeek = "Thursday",
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            InstructorId = 9,
                            LectureCode = "ECON301",
                            RoomId = 9,
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            LectureSessionId = 10,
                            DayOfWeek = "Friday",
                            EndTime = new TimeSpan(0, 13, 30, 0, 0),
                            InstructorId = 10,
                            LectureCode = "PHIL101",
                            RoomId = 10,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LectureCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationId");

                    b.HasIndex("LectureCode");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            NotificationId = 101,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Welcome to the new semester!"
                        },
                        new
                        {
                            NotificationId = 102,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Reminder: Submit your assignments by the end of this week."
                        },
                        new
                        {
                            NotificationId = 103,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Your midterm results are now available."
                        },
                        new
                        {
                            NotificationId = 104,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Join us for the upcoming workshop on AI and Machine Learning."
                        },
                        new
                        {
                            NotificationId = 105,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Library hours extended during finals week."
                        },
                        new
                        {
                            NotificationId = 106,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "New internship opportunities are available. Check your emails for details."
                        },
                        new
                        {
                            NotificationId = 107,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Update: Campus Wi-Fi maintenance scheduled for tomorrow."
                        },
                        new
                        {
                            NotificationId = 108,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Congratulations to all the participants of the Hackathon!"
                        },
                        new
                        {
                            NotificationId = 109,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Your course registration is now confirmed."
                        },
                        new
                        {
                            NotificationId = 110,
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Don't miss the cultural fest this weekend!"
                        });
                });

            modelBuilder.Entity("Entities.Models.NotificationRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("StudentId");

                    b.ToTable("NotificationRecipient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NotificationId = 101,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            NotificationId = 102,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            NotificationId = 103,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            NotificationId = 104,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            NotificationId = 105,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 6,
                            NotificationId = 106,
                            StudentId = 6
                        },
                        new
                        {
                            Id = 7,
                            NotificationId = 107,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 8,
                            NotificationId = 108,
                            StudentId = 8
                        },
                        new
                        {
                            Id = 9,
                            NotificationId = 109,
                            StudentId = 9
                        },
                        new
                        {
                            Id = 10,
                            NotificationId = 110,
                            StudentId = 10
                        });
                });

            modelBuilder.Entity("Entities.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("SubmittedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId");

                    b.HasIndex("RoomId");

                    b.ToTable("Request");

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            Content = "Fix the projector in Room 101",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 1,
                            Status = "Pending",
                            SubmittedBy = 1,
                            Type = "Maintenance",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 2,
                            Content = "Clean the whiteboard in Room 102",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 2,
                            Status = "Approved",
                            SubmittedBy = 2,
                            Type = "Cleaning",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 3,
                            Content = "Replace the chairs in Room 103",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 3,
                            Status = "Completed",
                            SubmittedBy = 3,
                            Type = "Equipment",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 4,
                            Content = "Internet not working in Room 104",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 4,
                            Status = "Pending",
                            SubmittedBy = 4,
                            Type = "IT Support",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 5,
                            Content = "Add a table to Room 105",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 5,
                            Status = "Approved",
                            SubmittedBy = 5,
                            Type = "Furniture",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 6,
                            Content = "Fix the air conditioning in Room 106",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 6,
                            Status = "Pending",
                            SubmittedBy = 6,
                            Type = "HVAC",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 7,
                            Content = "Microphone not working in Room 107",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 7,
                            Status = "Completed",
                            SubmittedBy = 7,
                            Type = "Audio",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 8,
                            Content = "Replace the bulbs in Room 108",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 8,
                            Status = "Pending",
                            SubmittedBy = 8,
                            Type = "Lighting",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 9,
                            Content = "Add extra chairs to Room 109",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 9,
                            Status = "Approved",
                            SubmittedBy = 9,
                            Type = "Seating",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 10,
                            Content = "Install a lock in Room 110",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoPath = new byte[0],
                            RoomId = 10,
                            Status = "Pending",
                            SubmittedBy = 10,
                            Type = "Security",
                            UpdatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventRegisterLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LectureCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReservationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClubId");

                    b.HasIndex("LectureCode");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            ClubName = "Science Club",
                            CreatedBy = 1,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            EventDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventRegisterLink = "https://example.com/event1",
                            LectureCode = "CS202",
                            ReservationType = 0,
                            RoomId = 1,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            ReservationId = 2,
                            ClubName = "Math Club",
                            CreatedBy = 2,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            EventDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventRegisterLink = "https://example.com/event2",
                            LectureCode = "MATH101",
                            ReservationType = 0,
                            RoomId = 2,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            ReservationId = 3,
                            ClubName = "Physics Club",
                            CreatedBy = 3,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            EventDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventRegisterLink = "https://example.com/event3",
                            LectureCode = "BIOL102",
                            ReservationType = 0,
                            RoomId = 3,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            ReservationId = 4,
                            ClubName = "Biology Club",
                            CreatedBy = 4,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            EventDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventRegisterLink = "https://example.com/event4",
                            LectureCode = "BIOL102",
                            ReservationType = 0,
                            RoomId = 4,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            ReservationId = 5,
                            ClubName = "Chemistry Club",
                            CreatedBy = 5,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            EventDate = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventRegisterLink = "https://example.com/event5",
                            LectureCode = "CHEM301",
                            ReservationType = 0,
                            RoomId = 5,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExamCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsProjectorWorking")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomType")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoomId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            BuildingId = 1,
                            Capacity = 88,
                            DepartmentId = 1,
                            Equipment = "Bilgisayar,Sıra",
                            ExamCapacity = 40,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "L206",
                            RoomType = 2
                        },
                        new
                        {
                            RoomId = 2,
                            BuildingId = 1,
                            Capacity = 40,
                            DepartmentId = 1,
                            Equipment = "Bilgisyar",
                            ExamCapacity = 40,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "L208",
                            RoomType = 2
                        },
                        new
                        {
                            RoomId = 3,
                            BuildingId = 1,
                            Capacity = 75,
                            DepartmentId = 2,
                            Equipment = "Sıra",
                            ExamCapacity = 25,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "D201",
                            RoomType = 0
                        },
                        new
                        {
                            RoomId = 4,
                            BuildingId = 1,
                            Capacity = 78,
                            DepartmentId = 2,
                            Equipment = "Sıra",
                            ExamCapacity = 28,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "D202",
                            RoomType = 0
                        },
                        new
                        {
                            RoomId = 5,
                            BuildingId = 2,
                            Capacity = 172,
                            DepartmentId = 3,
                            Equipment = "sıra",
                            ExamCapacity = 58,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "A1",
                            RoomType = 5
                        },
                        new
                        {
                            RoomId = 6,
                            BuildingId = 2,
                            Capacity = 178,
                            DepartmentId = 4,
                            Equipment = "sıra",
                            ExamCapacity = 58,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "A2",
                            RoomType = 5
                        },
                        new
                        {
                            RoomId = 7,
                            BuildingId = 2,
                            Capacity = 178,
                            DepartmentId = 5,
                            Equipment = "sıra",
                            ExamCapacity = 58,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "A3",
                            RoomType = 5
                        },
                        new
                        {
                            RoomId = 8,
                            BuildingId = 2,
                            Capacity = 81,
                            DepartmentId = 3,
                            Equipment = "sıra",
                            ExamCapacity = 27,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "S1",
                            RoomType = 0
                        },
                        new
                        {
                            RoomId = 9,
                            BuildingId = 1,
                            Capacity = 100,
                            DepartmentId = 2,
                            Equipment = "sıra",
                            ExamCapacity = 45,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "L104",
                            RoomType = 0
                        },
                        new
                        {
                            RoomId = 10,
                            BuildingId = 1,
                            Capacity = 40,
                            DepartmentId = 4,
                            Equipment = "sıra",
                            ExamCapacity = 40,
                            IsActive = true,
                            IsProjectorWorking = true,
                            Name = "L204",
                            RoomType = 0
                        });
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            DepartmentId = 1,
                            Email = "kemal123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Kemal",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 2,
                            DepartmentId = 2,
                            Email = "ahmet123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Ahmet",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 3,
                            DepartmentId = 3,
                            Email = "mustafa123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Mustafa",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 4,
                            DepartmentId = 4,
                            Email = "bülent123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Bülent",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 5,
                            DepartmentId = 5,
                            Email = "osman123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Osman",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 6,
                            DepartmentId = 1,
                            Email = "hakan123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Hakan",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 7,
                            DepartmentId = 2,
                            Email = "orhan123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Orhan",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 8,
                            DepartmentId = 3,
                            Email = "kenan123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Kenan",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 9,
                            DepartmentId = 3,
                            Email = "kamil123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Kamil",
                            Password = "2131233A"
                        },
                        new
                        {
                            StudentId = 10,
                            DepartmentId = 4,
                            Email = "salih123@hotmail.com",
                            GradeLevel = 2,
                            Name = "Salih",
                            Password = "2131233A"
                        });
                });

            modelBuilder.Entity("Entities.Models.Club", b =>
                {
                    b.HasOne("Entities.Models.Student", "President")
                        .WithMany()
                        .HasForeignKey("PresidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("President");
                });

            modelBuilder.Entity("Entities.Models.ClubMembership", b =>
                {
                    b.HasOne("Entities.Models.Club", "Club")
                        .WithMany("ClubMemberships")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("ClubMemberships")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.Enrollment", b =>
                {
                    b.HasOne("Entities.Models.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.Exam", b =>
                {
                    b.HasOne("Entities.Models.Lecture", "Lecture")
                        .WithMany("Exams")
                        .HasForeignKey("LectureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Entities.Models.ExamSession", b =>
                {
                    b.HasOne("Entities.Models.Exam", "Exam")
                        .WithMany("ExamSessions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Models.Instructor", b =>
                {
                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.InstructorPreference", b =>
                {
                    b.HasOne("Entities.Models.Instructor", "Instructor")
                        .WithMany("InstructorPreferences")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Lecture", "Lecture")
                        .WithMany("InstructorPreferences")
                        .HasForeignKey("LectureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Entities.Models.Lecture", b =>
                {
                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Lectures")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.LectureSession", b =>
                {
                    b.HasOne("Entities.Models.Instructor", "Instructor")
                        .WithMany("LectureSessions")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Lecture", "Lecture")
                        .WithMany("LectureSessions")
                        .HasForeignKey("LectureCode");

                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("LectureSessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Lecture");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.Lecture", null)
                        .WithMany("Notifications")
                        .HasForeignKey("LectureCode");
                });

            modelBuilder.Entity("Entities.Models.NotificationRecipient", b =>
                {
                    b.HasOne("Entities.Models.Notification", "Notification")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.Request", b =>
                {
                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Requests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Models.Reservation", b =>
                {
                    b.HasOne("Entities.Models.Club", null)
                        .WithMany("ClubReservations")
                        .HasForeignKey("ClubId");

                    b.HasOne("Entities.Models.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.HasOne("Entities.Models.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Building");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Entities.Models.Club", b =>
                {
                    b.Navigation("ClubMemberships");

                    b.Navigation("ClubReservations");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Lectures");

                    b.Navigation("Rooms");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entities.Models.Exam", b =>
                {
                    b.Navigation("ExamSessions");
                });

            modelBuilder.Entity("Entities.Models.Instructor", b =>
                {
                    b.Navigation("InstructorPreferences");

                    b.Navigation("LectureSessions");
                });

            modelBuilder.Entity("Entities.Models.Lecture", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("InstructorPreferences");

                    b.Navigation("LectureSessions");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Navigation("NotificationRecipients");
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Navigation("LectureSessions");

                    b.Navigation("Requests");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Navigation("ClubMemberships");

                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
